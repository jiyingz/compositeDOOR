call. = FALSE)
}
d1 = d1
d2 = d2
corr12 = corr12
p_oc1 = p_oc1
theta = calc_theta_2Dnormal(d1, d2, corr12, p_oc1)
p2 = cubature::adaptIntegrate(function(x) {p2function(d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
p3 = cubature::adaptIntegrate(p3function, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
sigma2 =  p2 + p3 - 2 * theta^2
return(list(var = sigma2, ps = c(theta, p2, p3)))
}
var_Z_2Dnormal(0,0,0.9,0.7)
#' Calculate Var(Z) for 2D Normal Outcomes
#'
#' Calculates the variance for Z under the null (d1=d2=0) or alternative (d1, d2 =/= 0) hypothesis under the assumption of equal sample sizes between treatment and control arms.
#'
#' @param d1 "True" difference (trt - ctrl) in outcome 1
#' @param d1 "True" difference (trt - ctrl) in outcome 2
#' @param corr12 Correlation between first and second outcomes
#' @param p_oc1 Probability of choosing outcome 1 as priority over outcome 2
#' @return A list containing 1) var = The numerical value of sigma^2 = Var(Z | 2D normal outcomes & input params) and 2) ps = A vector of (theta, p2, p3) used in calculation
var_Z_2Dnormal <- function(d1, d2, corr12, p_oc1) {
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("cubature", quietly = TRUE)) {
stop("Package \"cubature\" needed for this function to work. Please install it.",
call. = FALSE)
}
theta = calc_theta_2Dnormal(d1, d2, corr12, p_oc1)
p2 = cubature::adaptIntegrate(function(x, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p2function(x, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
p3 = cubature::adaptIntegrate(function(x, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p3function(y, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
sigma2 =  p2 + p3 - 2 * theta^2
return(list(var = sigma2, ps = c(theta, p2, p3)))
}
var_Z_2Dnormal(0,0,0.9,0.7)
#' Calculate Var(Z) for 2D Normal Outcomes
#'
#' Calculates the variance for Z under the null (d1=d2=0) or alternative (d1, d2 =/= 0) hypothesis under the assumption of equal sample sizes between treatment and control arms.
#'
#' @param d1 "True" difference (trt - ctrl) in outcome 1
#' @param d1 "True" difference (trt - ctrl) in outcome 2
#' @param corr12 Correlation between first and second outcomes
#' @param p_oc1 Probability of choosing outcome 1 as priority over outcome 2
#' @return A list containing 1) var = The numerical value of sigma^2 = Var(Z | 2D normal outcomes & input params) and 2) ps = A vector of (theta, p2, p3) used in calculation
var_Z_2Dnormal <- function(d1, d2, corr12, p_oc1) {
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("cubature", quietly = TRUE)) {
stop("Package \"cubature\" needed for this function to work. Please install it.",
call. = FALSE)
}
theta = calc_theta_2Dnormal(d1, d2, corr12, p_oc1)
p2 = cubature::adaptIntegrate(function(x, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p2function(x, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
p3 = cubature::adaptIntegrate(function(y, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p3function(y, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
sigma2 =  p2 + p3 - 2 * theta^2
return(list(var = sigma2, ps = c(theta, p2, p3)))
}
#' Calculate Var(Z) for 2D Normal Outcomes
#'
#' Calculates the variance for Z under the null (d1=d2=0) or alternative (d1, d2 =/= 0) hypothesis under the assumption of equal sample sizes between treatment and control arms.
#'
#' @param d1 "True" difference (trt - ctrl) in outcome 1
#' @param d1 "True" difference (trt - ctrl) in outcome 2
#' @param corr12 Correlation between first and second outcomes
#' @param p_oc1 Probability of choosing outcome 1 as priority over outcome 2
#' @return A list containing 1) var = The numerical value of sigma^2 = Var(Z | 2D normal outcomes & input params) and 2) ps = A vector of (theta, p2, p3) used in calculation
var_Z_2Dnormal <- function(d1, d2, corr12, p_oc1) {
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("cubature", quietly = TRUE)) {
stop("Package \"cubature\" needed for this function to work. Please install it.",
call. = FALSE)
}
theta = calc_theta_2Dnormal(d1, d2, corr12, p_oc1)
p2 = cubature::adaptIntegrate(function(x, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p2function(x, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
p3 = cubature::adaptIntegrate(function(y, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p3function(y, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
sigma2 =  p2 + p3 - 2 * theta^2
return(list(var = sigma2, ps = c(theta, p2, p3)))
}
var_Z_2Dnormal(0,0,0.9,0.7)
sqrt(0.159068)
p2function <- function(x, d1, d2, corr12, p_oc1) {
# Helper function -- d1, d2, corr12, p_oc1 params should be defined in var_Z_2Dnormal (parent) function below
# pointwise probability under the alternative distn, times density under the null distn
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
(
pmvnorm(lower = c(x[1], x[2]), upper = c(Inf, Inf), mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
p_oc1 * pmvnorm(lower = c(x[1], -Inf), upper = c(Inf, x[2]), mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
(1 - p_oc1) * pmvnorm(lower = c( -Inf, x[2]), upper = c(x[1], Inf), mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
) ^ 2 *
dmvnorm(x, mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
}
p3function <- function(y, d1, d2, corr12, p_oc1) {
# Helper function -- d1, d2, corr12, p_oc1 params should be defined in var_Z_2Dnormal (parent) function below
# pointwise probability under the null, times density under the alt distn
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
(
mvtnorm::pmvnorm(lower = c( -Inf, -Inf), upper = c(y[1], y[2]), mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
p_oc1 * mvtnorm::pmvnorm(lower = c( -Inf, y[2]), upper = c(y[1], Inf), mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
(1 - p_oc1) * mvtnorm::pmvnorm(lower = c(y[1], -Inf), upper = c(Inf, y[2]),  mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
) ^ 2 *
dmvnorm(y, mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
}
#' Calculate Var(Z) for 2D Normal Outcomes
#'
#' Calculates the variance for Z under the null (d1=d2=0) or alternative (d1, d2 =/= 0) hypothesis under the assumption of equal sample sizes between treatment and control arms.
#'
#' @param d1 "True" difference (trt - ctrl) in outcome 1
#' @param d1 "True" difference (trt - ctrl) in outcome 2
#' @param corr12 Correlation between first and second outcomes
#' @param p_oc1 Probability of choosing outcome 1 as priority over outcome 2
#' @return A list containing 1) var = The numerical value of sigma^2 = Var(Z | 2D normal outcomes & input params) and 2) ps = A vector of (theta, p2, p3) used in calculation
var_Z_2Dnormal <- function(d1, d2, corr12, p_oc1) {
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("cubature", quietly = TRUE)) {
stop("Package \"cubature\" needed for this function to work. Please install it.",
call. = FALSE)
}
theta = calc_theta_2Dnormal(d1, d2, corr12, p_oc1)
p2 = cubature::adaptIntegrate(function(x, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p2function(x, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
p3 = cubature::adaptIntegrate(function(y, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p3function(y, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
sigma2 =  p2 + p3 - 2 * theta^2
return(list(var = sigma2, ps = c(theta, p2, p3)))
}
sqrt(0.159068)
var_Z_2Dnormal(0,0,0.9,0.7)
sqrt(0.159068)
get_sampsize_2Dnormal <- function(means_null = c(0, 0), means_alt, corr12 = 0, p_oc1 = 1/2, MID = c(0, 0), alpha = 0.05, power = 0.9) {
# E[Z] and SD(Z) under the null
EZ.n = calc_theta_2Dnormal(d1 = means_null[1], d2 = means_null[2], corr12, p_oc1)
sigma.n = sqrt(var_Z_2Dnormal(d1 = means_null[1], d2 = means_null[2], corr12, p_oc1)$var)
## E[Z] and SD(Z) under the alt
EZ.a = calc_theta_2Dnormal(d1 = means_alt[1], d2 = means_alt[2], corr12, p_oc1)
sigma.a = sqrt(var_Z_2Dnormal(d1 = means_alt[1], d2 = means_alt[2], corr12, p_oc1)$var)
# Calculate sample size (for one arm)
samp_size = calc_sampsize(alpha, power, theta_null = 0.5, theta_alt = EZ.a, sigma_null = sigma.n, sigma_alt = sigma.a)
print(paste("The null mean is ", EZ.n, " and SD is ", sigma.n, ". ",
"The alternative mean is ", EZ.a, " and SD is ", sigma.a, ". ",
"The sample size required in the control arm is ", samp_size, ".", sep = ""))
return(list(EZ.n, EZ.a, sigma.n, sigma.a, samp_size))
}
#' Calculate Probability of Winning for 2D Normal Outcomes
#'
#' Uses exact integration to calculate theta = P(treatment patient wins over control patient) for 2D normal outcomes.
#' Sanity check: This should be 0.5 under the null
#'
#' @param d1 "True" difference (trt - ctrl) in outcome 1
#' @param d1 "True" difference (trt - ctrl) in outcome 2
#' @param corr12 Correlation between first and second outcomes
#' @param p_oc1 Probability of choosing outcome 1 as priority over outcome 2
#' @return Numerical value of theta = E(Z | 2D normal outcomes & input params) = P(trt patient wins over ctrl patient | 2D normal outcomes & input params)
calc_theta_2Dnormal <- function(d1, d2, corr12, p_oc1) {
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
theta = mvtnorm::pmvnorm(lower = c(0, 0), upper = c(Inf, Inf), mean = c(d1, d2), sigma = 2 * matrix(c(1, corr12, corr12, 1), 2, 2)) +
p_oc1 * mvtnorm::pmvnorm(lower = c(0, -Inf), upper = c(Inf, 0), mean = c(d1, d2), sigma = 2 * matrix(c(1, corr12, corr12, 1), 2, 2)) +
(1 - p_oc1) * mvtnorm::pmvnorm(lower = c( -Inf, 0), upper = c(0, Inf), mean = c(d1, d2), sigma = 2 * matrix(c(1, corr12, corr12, 1), 2, 2))
return(theta[1])
}
p2function <- function(x, d1, d2, corr12, p_oc1) {
# Helper function -- d1, d2, corr12, p_oc1 params should be defined in var_Z_2Dnormal (parent) function below
# pointwise probability under the alternative distn, times density under the null distn
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
(
pmvnorm(lower = c(x[1], x[2]), upper = c(Inf, Inf), mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
p_oc1 * pmvnorm(lower = c(x[1], -Inf), upper = c(Inf, x[2]), mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
(1 - p_oc1) * pmvnorm(lower = c( -Inf, x[2]), upper = c(x[1], Inf), mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
) ^ 2 *
dmvnorm(x, mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
}
p3function <- function(y, d1, d2, corr12, p_oc1) {
# Helper function -- d1, d2, corr12, p_oc1 params should be defined in var_Z_2Dnormal (parent) function below
# pointwise probability under the null, times density under the alt distn
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
(
mvtnorm::pmvnorm(lower = c( -Inf, -Inf), upper = c(y[1], y[2]), mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
p_oc1 * mvtnorm::pmvnorm(lower = c( -Inf, y[2]), upper = c(y[1], Inf), mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2)) +
(1 - p_oc1) * mvtnorm::pmvnorm(lower = c(y[1], -Inf), upper = c(Inf, y[2]),  mean = c(0, 0), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
) ^ 2 *
dmvnorm(y, mean = c(d1, d2), sigma = matrix(c(1, corr12, corr12, 1), 2, 2))
}
#' Calculate Var(Z) for 2D Normal Outcomes
#'
#' Calculates the variance for Z under the null (d1=d2=0) or alternative (d1, d2 =/= 0) hypothesis under the assumption of equal sample sizes between treatment and control arms.
#'
#' @param d1 "True" difference (trt - ctrl) in outcome 1
#' @param d1 "True" difference (trt - ctrl) in outcome 2
#' @param corr12 Correlation between first and second outcomes
#' @param p_oc1 Probability of choosing outcome 1 as priority over outcome 2
#' @return A list containing 1) var = The numerical value of sigma^2 = Var(Z | 2D normal outcomes & input params) and 2) ps = A vector of (theta, p2, p3) used in calculation
var_Z_2Dnormal <- function(d1, d2, corr12, p_oc1) {
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("cubature", quietly = TRUE)) {
stop("Package \"cubature\" needed for this function to work. Please install it.",
call. = FALSE)
}
theta = calc_theta_2Dnormal(d1, d2, corr12, p_oc1)
p2 = cubature::adaptIntegrate(function(x, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p2function(x, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
p3 = cubature::adaptIntegrate(function(y, D1 = d1, D2 = d2, rho = corr12, pc = p_oc1) {p3function(y, d1, d2, corr12, p_oc1)}, lowerLimit = c( -Inf, -Inf), upperLimit = c(Inf, Inf))$integral
sigma2 =  p2 + p3 - 2 * theta^2
return(list(var = sigma2, ps = c(theta, p2, p3)))
}
#' Get means, SDs, and sample size for 2 normal outcomes
#'
#' @param means_null A vector (d1, d2) of outcome means under the null hypothesis, default = c(0, 0)
#' @param means_alt A vector of outcome means under the alternative hypothesis
#' @param corr12 Correlation between Normal outcomes 1 and 2, default = 0
#' @param p_oc1 Probability of choosing outcome 1 as priority over outcome 2, default = 1/2
#' @param MID A vector for minimum important difference values of each outcome, default = c(0, 0)
#' @param alpha The Type I error rate, default = 0.05
#' @param power The chance of detecting a significant difference when one exists; power = 1 - beta, where beta = Type II error rate, default power = 0.9
#' @return A list containing empirical monte carlo of estimates of (null means, alternative means, null SD, alternative SD, sample size)
#' @export
get_sampsize_2Dnormal <- function(means_null = c(0, 0), means_alt, corr12 = 0, p_oc1 = 1/2, MID = c(0, 0), alpha = 0.05, power = 0.9) {
# E[Z] and SD(Z) under the null
EZ.n = calc_theta_2Dnormal(d1 = means_null[1], d2 = means_null[2], corr12, p_oc1)
sigma.n = sqrt(var_Z_2Dnormal(d1 = means_null[1], d2 = means_null[2], corr12, p_oc1)$var)
## E[Z] and SD(Z) under the alt
EZ.a = calc_theta_2Dnormal(d1 = means_alt[1], d2 = means_alt[2], corr12, p_oc1)
sigma.a = sqrt(var_Z_2Dnormal(d1 = means_alt[1], d2 = means_alt[2], corr12, p_oc1)$var)
# Calculate sample size (for one arm)
samp_size = calc_sampsize(alpha, power, theta_null = 0.5, theta_alt = EZ.a, sigma_null = sigma.n, sigma_alt = sigma.a)
print(paste("The null mean is ", EZ.n, " and SD is ", sigma.n, ". ",
"The alternative mean is ", EZ.a, " and SD is ", sigma.a, ". ",
"The sample size required in the control arm is ", samp_size, ".", sep = ""))
return(list(EZ.n, EZ.a, sigma.n, sigma.a, samp_size))
}
get_sampsize_2Dnormal(means_alt = c(0.2,0.2), corr12 = 0.7, p_oc1 = 0.7)
#' Calculate sample size for one arm
#'
#' @param alpha The Type I error rate (default = 0.05)
#' @param power The chance of detecting a significant difference when one exists; power = 1 - beta, where beta = Type II error rate (default power = 0.9)
#' @param theta_null The null mean (default = 0.5)
#' @param theta_alt The alternative mean
#' @param sigma_null The null standard deviation
#' @param sigma_alt The alternative standard deviation
#' @return The calculated sample size, via the formula: (z_{1-alpha/2} x sigma_null + z_{1-beta} x sigma_null)^2 / (theta_alt - theta_null)^2
calc_sampsize <- function(alpha = 0.05, power = 0.9, theta_null = 0.5, theta_alt, sigma_null, sigma_alt) {
return((qnorm(1 - alpha/2) * sigma_null + qnorm(power) * sigma_alt)^2 / (theta_alt - theta_null)^2)
}
get_sampsize_2Dnormal(means_alt = c(0.2,0.2), corr12 = 0.7, p_oc1 = 0.7)
means_null = c(0,0)
means_alt = c(0.2,0.2)
corr12 = 0.7
p_oc1 = 0.7
var_Z_2Dnormal(d1 = means_null[1], d2 = means_null[2], corr12, p_oc1)
sqrt(0.1444701)
get_sampsize_2Dnormal(means_alt = c(0.2,0.2), corr12 = 0, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.5), corr12 = 0, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.2), corr12 = 0.3, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.5), corr12 = 0.3, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.2), corr12 = 0.7, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.5), corr12 = 0.7, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.2), corr12 = 0.9, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.5), corr12 = 0.9, p_oc1 = 0.7)
get_sampsize_2Dnormal <- function(means_null = c(0, 0), means_alt, corr12 = 0, p_oc1 = 1/2, MID = c(0, 0), alpha = 0.05, power = 0.9) {
if(!(MID[1] == 0 & MID[2] == 0)) {
return("MID != 0 is currently not supported yet in this version of the package.")
}
# E[Z] and SD(Z) under the null
EZ.n = calc_theta_2Dnormal(d1 = means_null[1], d2 = means_null[2], corr12, p_oc1)
sigma.n = sqrt(var_Z_2Dnormal(d1 = means_null[1], d2 = means_null[2], corr12, p_oc1)$var)
## E[Z] and SD(Z) under the alt
EZ.a = calc_theta_2Dnormal(d1 = means_alt[1], d2 = means_alt[2], corr12, p_oc1)
sigma.a = sqrt(var_Z_2Dnormal(d1 = means_alt[1], d2 = means_alt[2], corr12, p_oc1)$var)
# Calculate sample size (for one arm)
samp_size = calc_sampsize(alpha, power, theta_null = 0.5, theta_alt = EZ.a, sigma_null = sigma.n, sigma_alt = sigma.a)
print(paste("The null mean is ", EZ.n, " and SD is ", sigma.n, ". ",
"The alternative mean is ", EZ.a, " and SD is ", sigma.a, ". ",
"The sample size required in the control arm is ", samp_size, ".", sep = ""))
return(list(EZ.n, EZ.a, sigma.n, sigma.a, samp_size))
}
get_sampsize_2Dnormal(means_alt = c(0.2,0.5), MID = c(1,0), corr12 = 0.9, p_oc1 = 0.7)
get_sampsize_2Dnormal(means_alt = c(0.2,0.5), MID = c(0,1), corr12 = 0.9, p_oc1 = 0.7)
devtools::document()
devtools::document()
get_sampsize_2Dnormal(means_alt = c(0.2,0.2), MID = c(0,0), corr12 = 0.0, p_oc1 = 0.7)
#' Get means, SDs, and sample size for 3 normal outcomes
#'
#' @param n Number of Monte Carlo samples to generate
#' @param means_null A vector of outcome means under the null hypothesis, default = c(0, 0, 0)
#' @param means_alt A vector of outcome means under the alternative hypothesis
#' @param corr12 Correlation between Normal outcomes 1 and 2, default = 0
#' @param corr13 Correlation between Normal outcomes 1 and 3, default = 0
#' @param corr23 Correlation between Normal outcomes 2 and 3, default = 0
#' @param p123 Probability of choosing endpoint order 1, 2, 3 (Category 1)
#' @param p132 Probability of choosing endpoint order 1, 3, 2 (Category 2)
#' @param p213 Probability of choosing endpoint order 2, 1, 3 (Category 3)
#' @param p231 Probability of choosing endpoint order 2, 3, 1 (Category 4)
#' @param p312 Probability of choosing endpoint order 3, 1, 2 (Category 5)
#' @param p321 Probability of choosing endpoint order 3, 2, 1 (Category 6)
#' @param MID A vector for minimum important difference values of each outcome, default = c(0, 0, 0)
#' @param alpha The Type I error rate, default = 0.05
#' @param power The chance of detecting a significant difference when one exists; power = 1 - beta, where beta = Type II error rate, default power = 0.9
#' @return A list containing empirical monte carlo of estimates of (null means, alternative means, null SD, alternative SD, sample size)
#' @export
get_sampsize_3Dnormal <- function(n, means_null = c(0, 0, 0), means_alt, corr12 = 0, corr13 = 0, corr23 = 0, p123 = 1/6, p132 = 1/6, p213 = 1/6, p231 = 1/6, p312 = 1/6, p321 = 1/6, MID = c(0, 0, 0), alpha = 0.05, power = 0.9) {
# Generate outcomes for control samples
ctrl_samp1 = generate_3Dnormal_outcomes(n, means_null, corr12, corr13, corr23)
ctrl_prefs1 = generate_3Dprefs(n, p123, p132, p213, p231, p312, p321)
ctrl_samp2 = generate_3Dnormal_outcomes(n, means_null, corr12, corr13, corr23)
ctrl_prefs2 = generate_3Dprefs(n, p123, p132, p213, p231, p312, p321)
ctrl_samp3 = generate_3Dnormal_outcomes(n, means_null, corr12, corr13, corr23)
ctrl_prefs3 = generate_3Dprefs(n, p123, p132, p213, p231, p312, p321)
# Generate outcomes for treatment samples
trt_samp1 = generate_3Dnormal_outcomes(n, means_alt, corr12, corr13, corr23)
trt_prefs1 = generate_3Dprefs(n, p123, p132, p213, p231, p312, p321)
trt_samp2 = generate_3Dnormal_outcomes(n, means_alt, corr12, corr13, corr23)
trt_prefs2 = generate_3Dprefs(n, p123, p132, p213, p231, p312, p321)
# Compare control to control to get empirical null mean and variance
zout12.n = apply(cbind(ctrl_samp1, ctrl_prefs1, ctrl_samp2, ctrl_prefs2), 1, get_doorz_3Dnormal, MID)
zout13.n = apply(cbind(ctrl_samp1, ctrl_prefs1, ctrl_samp3, ctrl_prefs3), 1, get_doorz_3Dnormal, MID)
zout23.n = apply(cbind(ctrl_samp2, ctrl_prefs2, ctrl_samp3, ctrl_prefs3), 1, get_doorz_3Dnormal, MID)
# Compare control to treatment to get empirical alternative mean and variance
zout14.a = apply(cbind(ctrl_samp1, ctrl_prefs1, trt_samp1, trt_prefs1), 1, get_doorz_3Dnormal, MID)
zout15.a = apply(cbind(ctrl_samp1, ctrl_prefs1, trt_samp2, trt_prefs2), 1, get_doorz_3Dnormal, MID)
zout24.a = apply(cbind(ctrl_samp2, ctrl_prefs2, trt_samp1, trt_prefs1), 1, get_doorz_3Dnormal, MID)
# E[Z] under the null and alternative hypotheses
EZ.n = mean(c(zout12.n, zout13.n, zout23.n))
EZ.a = mean(c(zout14.a, zout15.a, zout24.a))
# Var(Z) under the null and alternative hypotheses
p12.n = mean(c(zout12.n * zout13.n, zout23.n * zout13.n)) #correlation
sigma.n = sqrt(2 * (p12.n - 0.5^2))
p12.a = mean(zout14.a * zout15.a) #correlation
p21.a = mean(zout14.a * zout24.a)
sigma.a = sqrt(p12.a + p21.a - 2 * EZ.a^2)
# Calculate sample size (for one arm)
samp_size = calc_sampsize(alpha, power, theta_null = 0.5, theta_alt = EZ.a, sigma_null = sigma.n, sigma_alt = sigma.a)
print(paste("The null mean is ", EZ.n, " and SD is ", sigma.n, ". ",
"The alternative mean is ", EZ.a, " and SD is ", sigma.a, ". ",
"The sample size required in the control arm is ", samp_size, ".", sep = ""))
return(list(EZ.n, EZ.a, sigma.n, sigma.a, samp_size))
}
#' Generate 3 Normal Outcomes
#'
#' This function takes given parameters and generates n Monte Carlo samples of 3 normally distributed outcomes per patient.
#'
#' @param n Sample size
#' @param means A vector of outcome means under the alternative hypothesis
#' @param corr12 Correlation between Normal outcomes 1 and 2, default = 0
#' @param corr13 Correlation between Normal outcomes 1 and 3, default = 0
#' @param corr23 Correlation between Normal outcomes 2 and 3, default = 0
#' @return A nx3 matrix with 3 normally distributed outcome values per row
#' @export
generate_3Dnormal_outcomes <- function(n, means, corr12 = 0, corr13 = 0, corr23 = 0){
if (!requireNamespace("mvtnorm", quietly = TRUE)) {
stop("Package \"mvtnorm\" needed for this function to work. Please install it.",
call. = FALSE)
}
# Build correlation matrix for 3 normal outcomes
msigma = matrix(c(  1,     corr12,    corr13,
corr12,     1,      corr23,
corr13,  corr23,      1   ),
nrow = 3, ncol = 3, byrow = TRUE)
# Means
mu = matrix(means, nrow = 3, ncol = 1, byrow = FALSE)
# Generate 3 normal outcomes per patient
return(mvtnorm::rmvnorm(n, mean = mu, sigma = msigma))
}
#' Generate the endpoint ordering preferences for patients
#'
#' @param n Sample size
#' @param p123 Probability of choosing endpoint order 1, 2, 3 (Category 1)
#' @param p132 Probability of choosing endpoint order 1, 3, 2 (Category 2)
#' @param p213 Probability of choosing endpoint order 2, 1, 3 (Category 3)
#' @param p231 Probability of choosing endpoint order 2, 3, 1 (Category 4)
#' @param p312 Probability of choosing endpoint order 3, 1, 2 (Category 5)
#' @param p321 Probability of choosing endpoint order 3, 2, 1 (Category 6)
#' @return A vector of length n containing preference categories sampled using given probabilities
#' @export
generate_3Dprefs <- function(n, p123 = 1/6, p132 = 1/6, p213 = 1/6, p231 = 1/6, p312 = 1/6, p321 = 1/6) {
probpref = c(p123, p132, p213, p231, p312, p321)
return(sample(c(1:6), n, replace = T, prob = probpref))
}
#' Determine overall win/tie/lose status (Z) comparing two patients from different groups
#' Outcome preference order categories are: 1 = 123; 2 = 132; 3 = 213; 4 = 231; 5 = 312; 6 = 321
#'
#' @param x A vector containing outcomes from a patient of group 1, preference order category (1-6) of patient of group 1, outcomes from a patient of group 2, and preference order category (1-6) of patient of group 2 (in that order)
#' @param MID A vector for minimum important difference values of each outcome
#' @return The Z indcator for whether patient 2 wins (1), ties (0.5), or loses (0) to patient 1 over all outcomes, given preferences
#'
get_doorz_3Dnormal <- function(x, MID){
# Extract outcomes
outcomes1 = x[1:3]
outcomes2 = x[5:7]
# Get win/tie/lose indicators for each outcome
y = get_zij_per_outcome_normal(outcomes1, outcomes2, MID)
# If ctrl and trt patient has same preference (x[4] == x[8]) and the preference is of category # (x[4] == #):
if((x[4] == x[8]) & (x[4] == 1)) { # both have pref 123
if(y[1] != 0.5) {z = y[1]} else {if(y[2] != 0.5){z = y[2]} else{z = y[3]}}} # if z1 not a tie, take that. otherwise, move down the line until get a tie breaker
if((x[4] == x[8]) & (x[4] == 2)) { # both have pref 132
if(y[1] != 0.5) {z = y[1]} else {if(y[3] != 0.5){z = y[3]} else {z = y[2]}}}
if((x[4] == x[8]) & (x[4] == 3)) { # both have pref 213
if(y[2] != 0.5) {z = y[2]} else {if(y[1] != 0.5){z = y[1]} else {z = y[3]}}}
if((x[4] == x[8]) & (x[4] == 4)) { # both have pref 231
if(y[3] != 0.5) {z = y[3]} else {if(y[1] != 0.5){z = y[1]} else {z = y[2]}}}
if((x[4] == x[8]) & (x[4] == 5)) { # both have pref 312
if(y[2] != 0.5) {z = y[2]} else {if(y[3] != 0.5){z = y[3]} else {z = y[1]}}}
if((x[4] == x[8]) & (x[4] == 6)) { # both have pref 321
if(y[3] != 0.5) {z = y[3]} else {if(y[2] != 0.5){z = y[2]} else {z = y[1]}}}
# If the patients agree on top 1 priority outcome as first common set:
if(((x[4] == 1) & (x[8] == 2)) | ((x[4] == 2) & (x[8] == 1))) { # prefs 132 and 123
if(y[1] != 0.5) {z = y[1]} else {  # if z1 not a tie, take that. otherwise, in 2nd and 3rd outcomes,
if(max(y[c(2,3)]) == 1 & min(y[c(2,3)]) > 0) {z=1} # if there is >=1 win and no loses, then overall result is win
if(max(y[c(2,3)]) < 1 & min(y[c(2,3)]) == 0) {z=0} # if there is >=1 lose and no wins, then overall result is lose
if(max(y[c(2,3)]) == 1 & min(y[c(2,3)]) == 0) {z=0.5}
if(max(y[c(2,3)]) == 0.5 & min(y[c(2,3)]) == 0.5) {z=0.5}
}
}
if(((x[4] == 3) & (x[8] == 5)) | ((x[4] == 5) & (x[8] == 3))) { # prefs 213 AND 312
if(y[2] != 0.5) {z = y[2]} else {
if(max(y[c(1,3)]) == 1 & min(y[c(1,3)]) > 0) {z=1}
if(max(y[c(1,3)]) < 1 & min(y[c(1,3)]) == 0) {z=0}
if(max(y[c(1,3)]) == 1 & min(y[c(1,3)]) == 0) {z=0.5}
if(max(y[c(1,3)]) == 0.5 & min(y[c(1,3)]) == 0.5) {z=0.5}
}
}
if(((x[4] == 4) & (x[8] == 6)) | ((x[4] == 6) & (x[8] == 4))) { # prefs 231 AND 321
if(y[3] != 0.5) {z = y[3]} else {
if(max(y[c(1,2)]) == 1 & min(y[c(1,2)]) > 0) {z=1}
if(max(y[c(1,2)]) < 1 & min(y[c(1,2)]) == 0) {z=0}
if(max(y[c(1,2)]) == 1 & min(y[c(1,2)]) == 0) {z=0.5}
if(max(y[c(1,2)]) == 0.5 & min(y[c(1,2)]) == 0.5) {z=0.5}
}
}
# If the patients agree on top 2 priority outcomes as first common set:
if(((x[4] == 1) & (x[8] == 3)) | ((x[4] == 3) & (x[8] == 1))) { # outcome 1, 2 are prefs in common (123 and 213)
if(max(y[c(1,2)]) == 1 & min(y[c(1,2)]) > 0) {z=1} # win if at least one win and no loses
if(max(y[c(1,2)]) < 1 & min(y[c(1,2)]) == 0) {z=0} # lose if at least one lose and no wins
if(max(y[c(1,2)]) == 1 & min(y[c(1,2)]) == 0) {z=0.5} # tie if one win, one lose
if(max(y[c(1,2)]) == 0.5 & min(y[c(1,2)]) == 0.5) {z = y[3]} # if both tie, the third outcome gets to determine win status
}
if(((x[4] == 2) & (x[8] == 4)) | ((x[4] == 4) & (x[8] == 2))) { # outcomes 1, 3 are prefs in common (132 and 231)
if(max(y[c(1,3)]) == 1 & min(y[c(1,3)]) > 0) {z=1}
if(max(y[c(1,3)]) < 1 & min(y[c(1,3)]) == 0) {z=0}
if(max(y[c(1,3)]) == 1 & min(y[c(1,3)]) == 0) {z=0.5}
if(max(y[c(1,3)]) == 0.5 & min(y[c(1,3)]) == 0.5) {z = y[2]}
}
if(((x[4] == 5) & (x[8] == 6)) | ((x[4] == 6) & (x[8] == 5))) { # outcome 2, 3 are prefs in common (312 and 321)
if(max(y[c(2,3)]) == 1 & min(y[c(2,3)]) > 0) {z=1}
if(max(y[c(2,3)]) < 1 & min(y[c(2,3)]) == 0) {z=0}
if(max(y[c(2,3)]) == 1 & min(y[c(2,3)]) == 0) {z=0.5}
if(max(y[c(2,3)]) == 0.5 & min(y[c(2,3)]) == 0.5) {z = y[1]}
}
# If the patients agree on top 3 priority outcomes as first common set:
# (Reminder: Outcome categories are: 1 = 123; 2 = 132; 3 = 213; 4 = 231; 5 = 312; 6 = 321)
# The categories with first common set = all 3 outcomes are:
# category 1 with 4, 5, 6
# category 2 with 3, 5, 6
# category 3 with 2, 4, 6
# category 4 with 1, 3, 5
# category 5 with 1, 2, 4
# category 6 with 1, 2, 3
# Unique combos are: 1-4, 1-5, 1-6, 2-3, 2-5, 2-6, 3-4, 3-6, 4-5
if(((x[4] == 1) & (x[8] >= 4)) | ((x[4] >= 4) & (x[8] == 1)) | ((x[4] == 2) & (x[8] == 3)) | ((x[4] == 3) & (x[8] == 2)) |
((x[4] == 2) & (x[8] >= 5)) | ((x[4] >= 5) & (x[8] == 2)) |
((x[4] == 3) & (x[8] == 4)) | ((x[4] == 4) & (x[8] == 3)) | ((x[4] == 3) & (x[8] == 6)) | ((x[4] == 6) & (x[8] == 3)) |
((x[4] == 4) & (x[8] == 5)) | ((x[4] == 5) & (x[8] == 4))) {
if(max(y[c(1,2,3)]) == 1 & min(y[c(1,2,3)]) > 0) {z=1} # win if at least one win and no loses
if(max(y[c(1,2,3)]) < 1 & min(y[c(1,2,3)]) == 0) {z=0} # lose if at least one lose and no wins
if(max(y[c(1,2,3)]) == 1 & min(y[c(1,2,3)]) == 0) {z=0.5} # tie if at least one win, at least one lose
if(max(y[c(1,2,3)]) == 0.5 & min(y[c(1,2,3)]) == 0.5) {z=0.5} # tie if all outcomes tied
}
return(z)
}
#' Get win/tie/lose indicator per outcome (for normal outcomes)
#' For example, if patient 1 has outcome values c(-1, 0, 2) and patient 2 has outcomes c(1, 0, 0) and the minimum important difference (MID) is 0 for all 3 outcomes, and greater values are better,
#' then this function will return c(1, 0.5, 0) for a win in outcome 1, a tie in outcome 2, and a lose in outcome 3 (patient 2 compared to patient 1).
#' Used in the get_doorz_3Dnormal() function.
#'
#' @param outcomes1 A vector containing outcomes from a patient of group 1
#' @param outcomes2 A vector containing outcomes from a patient of group 2
#' @param MID A vector for minimum important difference values of each outcome
#' @return A vector of length 3, containing 3 indicators: 1 if patient from group 2 wins in that outcome over patient from group 1, 0.5 if tied, and 0 if lose
get_zij_per_outcome_normal <- function(outcomes1, outcomes2, MID) {
# Get number of outcomes
n_outcomes = length(outcomes1)
# Get outcome differences (group 2 - group 1)
diff = outcomes2 - outcomes1
# Get win/tie/lose indicators for each outcome
y = rep(0.5, n_outcomes) # initialize all outcomes as ties
y[diff > MID] = 1 # change to win if trt outcome - ctrl outcome > mids
y[-diff > MID] = 0 # change to lose if trt outcome - ctrl outcome < mids
return(y)
}
